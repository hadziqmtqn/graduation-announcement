<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Attributes\Scope;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Str;

class SchoolYear extends Model
{
    protected $fillable = [
        'slug',
        'first_year',
        'last_year',
        'announcement_start_date',
        'announcement_end_date',
        'is_active',
    ];

    protected function casts(): array
    {
        return [
            'slug' => 'string',
            'first_year' => 'integer',
            'last_year' => 'integer',
            'announcement_start_date' => 'datetime',
            'announcement_end_date' => 'datetime',
            'is_active' => 'boolean',
        ];
    }

    protected static function boot(): void
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function (SchoolYear $schoolYear) {
            $schoolYear->slug = Str::uuid()->toString();
        });

        static::created(function (SchoolYear $schoolYear) {
            if ($schoolYear->is_active) {
                self::where('id', '!=', $schoolYear->id)
                    ->update(['is_active' => false]);
            }
        });

        static::updated(function (SchoolYear $schoolYear) {
            if ($schoolYear->is_active) {
                self::where('id', '!=', $schoolYear->id)
                    ->update(['is_active' => false]);
            }
        });
    }

    protected function year(): Attribute
    {
        return Attribute::make(
            get: fn($value, array $attributes) => $attributes['first_year'] . '/' . $attributes['last_year'],
        );
    }

    public function students(): HasMany
    {
        return $this->hasMany(Student::class, 'school_year_id');
    }

    // TODO Scope
    #[Scope]
    protected function active(Builder $query): Builder
    {
        return $query->where('is_active', true);
    }

    #[Scope]
    protected function search(Builder $query, $request): Builder
    {
        $search = $request['search'] ?? null;

        return $query->when($search, fn($query) => $query->whereAny(['first_year', 'last_year'], 'like', '%' . $search . '%'));
    }
}
